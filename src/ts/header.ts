// automatically generated by the FlatBuffers compiler, do not modify

import * as flatbuffers from './flatbuffers/flatbuffers';

import { Column } from './column';
import { GeometryType } from './geometry-type';
import { Crs } from './crs'


/**
 * @constructor
 */
export class Header {
  /**
   * @type flatbuffers.ByteBuffer
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type number
   */
  bb_pos = 0;
/**
 * @param number i
 * @param flatbuffers.ByteBuffer bb
 * @returns Header
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Header {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Header= obj
 * @returns Header
 */
static getRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * @param flatbuffers.ByteBuffer bb
 * @param Header= obj
 * @returns Header
 */
static getSizePrefixedRootAsHeader(bb:flatbuffers.ByteBuffer, obj?:Header):Header {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new Header()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * @param number index
 * @returns number
 */
envelope(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : 0;
}

/**
 * @returns number
 */
envelopeLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * @returns Float64Array
 */
envelopeArray():Float64Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float64Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

/**
 * @returns GeometryType
 */
geometryType():GeometryType {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /** @type GeometryType */ (this.bb!.readUint8(this.bb_pos + offset)) : GeometryType.Unknown;
}

/**
 * @returns boolean
 */
hasZ():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * @returns boolean
 */
hasM():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * @returns boolean
 */
hasT():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * @returns boolean
 */
hasTM():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 16);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

/**
 * @param number index
 * @param Column= obj
 * @returns Column
 */
columns(index: number, obj?:Column):Column|null {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? (obj || new Column()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

/**
 * @returns number
 */
columnsLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 18);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

/**
 * @returns flatbuffers.Long
 */
featuresCount():flatbuffers.Long {
  const offset = this.bb!.__offset(this.bb_pos, 20);
  return offset ? this.bb!.readUint64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
}

/**
 * @returns number
 */
indexNodeSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 22);
  return offset ? this.bb!.readUint16(this.bb_pos + offset) : 16;
}

/**
 * @param Crs= obj
 * @returns Crs|null
 */
crs(obj?:Crs):Crs|null {
  const offset = this.bb!.__offset(this.bb_pos, 24);
  return offset ? (obj || new Crs()).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
}

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
title():string|null
title(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
title(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 26);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 28);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * @param flatbuffers.Encoding= optionalEncoding
 * @returns string|Uint8Array|null
 */
metadata():string|null
metadata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metadata(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 30);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

/**
 * @param flatbuffers.Builder builder
 */
static startHeader(builder:flatbuffers.Builder) {
  builder.startObject(14);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset envelopeOffset
 */
static addEnvelope(builder:flatbuffers.Builder, envelopeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, envelopeOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param Array.<number> data
 * @returns flatbuffers.Offset
 */
static createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Float64Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createEnvelopeVector(builder:flatbuffers.Builder, data:number[]|Float64Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat64(data[i]);
  }
  return builder.endVector();
}

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startEnvelopeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
}

/**
 * @param flatbuffers.Builder builder
 * @param GeometryType geometryType
 */
static addGeometryType(builder:flatbuffers.Builder, geometryType:GeometryType) {
  builder.addFieldInt8(2, geometryType, GeometryType.Unknown);
}

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasZ
 */
static addHasZ(builder:flatbuffers.Builder, hasZ:boolean) {
  builder.addFieldInt8(3, +hasZ, +false);
}

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasM
 */
static addHasM(builder:flatbuffers.Builder, hasM:boolean) {
  builder.addFieldInt8(4, +hasM, +false);
}

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasT
 */
static addHasT(builder:flatbuffers.Builder, hasT:boolean) {
  builder.addFieldInt8(5, +hasT, +false);
}

/**
 * @param flatbuffers.Builder builder
 * @param boolean hasTM
 */
static addHasTM(builder:flatbuffers.Builder, hasTM:boolean) {
  builder.addFieldInt8(6, +hasTM, +false);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset columnsOffset
 */
static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(7, columnsOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param Array.<flatbuffers.Offset> data
 * @returns flatbuffers.Offset
 */
static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
}

/**
 * @param flatbuffers.Builder builder
 * @param number numElems
 */
static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Long featuresCount
 */
static addFeaturesCount(builder:flatbuffers.Builder, featuresCount:flatbuffers.Long) {
  builder.addFieldInt64(8, featuresCount, builder.createLong(0, 0));
}

/**
 * @param flatbuffers.Builder builder
 * @param number indexNodeSize
 */
static addIndexNodeSize(builder:flatbuffers.Builder, indexNodeSize:number) {
  builder.addFieldInt16(9, indexNodeSize, 16);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset crsOffset
 */
static addCrs(builder:flatbuffers.Builder, crsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(10, crsOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset titleOffset
 */
static addTitle(builder:flatbuffers.Builder, titleOffset:flatbuffers.Offset) {
  builder.addFieldOffset(11, titleOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset descriptionOffset
 */
static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(12, descriptionOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset metadataOffset
 */
static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(13, metadataOffset, 0);
}

/**
 * @param flatbuffers.Builder builder
 * @returns flatbuffers.Offset
 */
static endHeader(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishHeaderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
}

/**
 * @param flatbuffers.Builder builder
 * @param flatbuffers.Offset offset
 */
static finishSizePrefixedHeaderBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset, undefined, true);
}

}
